# This .travis.yml is based on LOOT's .travis.yml:
# https://github.com/loot/loot/blob/dev/.travis.yml
 

# We are (unfortunately) dealing with a C++ project.
language: cpp

# Use Ubuntu 14.04.5 LTS (Trusty Tahr) instead of Ubuntu 12.04.5 LTS (Precise Pangolin)
dist: trusty

cache:
  directories:
    # Cache the boost install
    - $HOME/boost_1_63_0/boost
    - $HOME/boost_1_63_0/stage/lib
    - $HOME/poco

# We're going to need MPI and the mono runtime.
addons:
  apt:
    packages: &default_packages
      - mono-runtime
      - libmono-corlib2.0-cil
      - libmono-corlib4.0-cil
      - libmono-corlib4.5-cil
      - libmono-system-xml4.0-cil
      - libmono-system-core4.0-cil
      - mpich
      - libmpich-dev
      # The CMake package is kind of dated. We'll download a later version
      # of cmake later on.
      # - cmake
      # Don't grab the APT boost package, because that package is stale.
      # We'll need to build boost ourselves.
      # - libboost-all-dev

matrix:
  include:
    - compiler: gcc
      env: CC_COMPILER_NAME='gcc-6' CXX_COMPILER_NAME='g++-6'
      addons:
        apt:
          sources:
            - ubuntu-toolchain-r-test
            - mono
          packages:
            - *default_packages
            - gcc-6
            - g++-6

    - compiler: clang
      env: CC_COMPILER_NAME='clang-4.0' CXX_COMPILER_NAME='clang++-4.0'
      addons:
        apt:
          sources:
            - ubuntu-toolchain-r-test
            - llvm-toolchain-trusty-4.0
            - mono
          packages:
            - *default_packages
            - clang-4.0
            - clang++-4.0
            - libstdc++-6-dev

before_install:
  - export CXX="$CXX_COMPILER_NAME" CC="$CC_COMPILER_NAME"
  # Print the C++ compiler version.
  - $CXX --version
  # Print the Mono version number.
  - mono --version
  # Grab a relatively recent version of CMake, unzip it and add
  # it to the path.
  - wget https://cmake.org/files/v3.5/cmake-3.5.2-Linux-x86_64.tar.gz
  - tar -xvf cmake-3.5.2-Linux-x86_64.tar.gz
  - export PATH="$PWD/cmake-3.5.2-Linux-x86_64/bin/:$PATH"
  # Print the CMake version.
  - cmake --version
  # Grab the gtest report pretty printer.
  - wget https://github.com/jonathanvdc/gtest-report-tools/releases/download/v0.1.3/gtest-report-tools.zip
  - unzip gtest-report-tools.zip -d gtest-report-tools
  # Build and install boost.
  - echo "using mpi ;" > ~/site-config.jam
  - wget https://raw.githubusercontent.com/flu-plus-plus/ci-scripts/master/install_boost.py
  - python install_boost.py --directory ~ --boost-version 1.63.0 --address-model 64 --toolchain=$CC_COMPILER_NAME --stagedir stage atomic chrono date_time filesystem iostreams locale log regex system thread serialization mpi
  # Set the BOOST_ROOT environment variable.
  - export BOOST_ROOT=$HOME/boost_1_63_0
  - export LD_LIBRARY_PATH=$HOME/boost_1_63_0/stage/lib:$LD_LIBRARY_PATH
  
  # Build and install Poco
  - mkdir -p $HOME/poco
  - wget https://pocoproject.org/releases/poco-1.7.8/poco-1.7.8p2.tar.gz
  - tar -xzf poco-1.7.8p2.tar.gz -C $HOME/poco
  - pushd $HOME/poco/poco-1.7.8p2
  - ./configure
  - make -s
  - export LD_LIBRARY_PATH="/usr/local/lib:$LD_LIBRARY_PATH"
  - sudo make -s install
  - popd

script:
  # `make all; make test`, but fancier.
  - make all
  - make test_all
  # Push the report to our website.
  - ./push-report.sh
  # Pretty-print the test results.
  - mono gtest-report-tools/gtest-report-print.exe --ansi build/installed/bin/gtester_all.xml
