/**
 * Script for the visualizer webpage.
 */

$(document).ready(function(){
    // Register the file-loading event
    visualizer = new Visualizer('.file-input', '.day-control');
})

// File reading stuff

/// Handler passed to the file selector, called when a file is selected.
function readSingleFile(f, handler) {
    var file = f.target.files[0];
    if (!file) return;
        
    var reader = new FileReader();
    reader.onload = handler;
    // reader.onload = e => handleFile(e.target.result);

    reader.readAsText(file);
}

/// Cleans up the JSON that boost generated by parsing strings back to numerics where needed.
function cleanData(data){
    for(i in data.towns){
        town = data.towns[i];
        town.size = parseInt(town.size);
        town.lat = parseFloat(town.lat);
        town.long = parseFloat(town.long);
    }
    for(i in data.days){
        day = data.days[i];
        for(town in day)
            day[town] = parseInt(day[town]);
    }
}

// Remove all spaces from a given string.
function noSpace(s){ return s.split(" ").join(''); }


//-------------------//
// Class: Visualizer //
//-------------------//

/// Make a new Visualizer bound to the given elements.
var Visualizer = function(inputSelector, controlSelector){
    // Place our hook into the file selector
    $(inputSelector).on('change', f => readSingleFile(f, this.handleFile.bind(this)));

    this.initializeControls(controlSelector);
}

/// Bind into the controls and set the appropriate events.
Visualizer.prototype.initializeControls = function (controlSelector){
    $c = $(controlSelector);
    this.control = c = Object();
    c.prevDay = $c.find('.prev-day');
    c.nextDay = $c.find('.next-day');
    c.range = $c.find('.range-input');
    c.all = [c.prevDay, c.nextDay, c.range];

    // Bind events
    c.prevDay.on("click", this.prevDay.bind(this));
    c.nextDay.on("click", this.nextDay.bind(this));
    c.range.on("input", () => this.updateDay(this.control.range.val()));

    // Disable the controls, they're not ready yet.
    this.disableControls();
}

/// Set up and enable the controls based on the simulation data.
Visualizer.prototype.configureControls = function(){
    this.control.range.prop("max", this.maxDays);
    // Enable the controls
    this.disableControls(false);
}

// User control methods:
Visualizer.prototype.prevDay = function(){ this.updateDay(visualizer.day - 1); }
Visualizer.prototype.nextDay = function(){ this.updateDay(visualizer.day + 1); }

/// Enable or disable the controls.
Visualizer.prototype.disableControls = function(val=true){
    for(i in this.control.all)
        this.control.all[i].prop("disabled", val);
}

/// Handler passed to the FileReader, called with the contents of the selected file.
Visualizer.prototype.handleFile = function(e) {
    var data = JSON.parse(e.target.result);
    cleanData(data);
    console.log(data);
    this.initialize(data);
}

/// Actually initialize the Visualizer with the data retrieved from the file.
Visualizer.prototype.initialize = function(data){
    // Grab the data parsed from the file
    this.days = data.days;
    this.towns = data.towns;

    // Put the total number of days
    this.maxDays = this.days.length;
    $('.days').text(this.maxDays);
    
    // set up the view
    this.makeView();
    this.updateDay(0);

    // enable the controls
    this.configureControls();
}

/// Prepare the HTML document with the basic frameworks for our view.
Visualizer.prototype.makeView = function(){
    this.makeTable();
    // this.makeMap();
}

/// Prepare the HTML document with a basic table.
Visualizer.prototype.makeTable = function(){
    // Clear the current view
    $view = $("#view");
    $view.html('');

    // Make a table
    $table = $('<table>', {class:'table table-striped table-condensed'});
    $view.append($table);

    // Header
    $row = $('<tr>');
    $row.append($('<th>Name</th>'));
    $row.append($('<th>Inhabitants</th>'));
    $row.append($('<th>Infected</th>'));
    $row.append($('<th>Percentage</th>'));
    $table.append($row);

    // Rows
    for(town in this.towns){
        $row = $('<tr>', {id:noSpace(town)});
        $row.append($('<td>' + town + '</td>'));
        $row.append($('<td>' + this.towns[town].size + '</td>'));
        $row.append($('<td>', {class:'infected'}));
        $row.append($('<td>', {class:'percent'}));
        $table.append($row);
    }
}

/// If given a valid day, update the view to match the info at that day.
Visualizer.prototype.updateDay = function(day){
    // clamp day to the valid range
    day = day > this.maxDays-1 ? this.maxDays-1 : day < 0 ? 0 : day;

    this.day = day;
    $('.current-day').text(day);
    this.control.range.prop("value", day);

    this.updateView();
}

/// Update the view to reflect the currently selected day.
Visualizer.prototype.updateView = function(){
    this.updateTable();
    // this.updateMap();
}

/// Update the table to reflect the currently selected day.
Visualizer.prototype.updateTable = function(){
    var currentDay = this.days[this.day];
    var total = 0;
    // Update the view further
    for(town in this.towns){
        // If there's no measurement, then it must be zero
        total += val = currentDay[town] || 0;
        // Put the amount of infected
        $('#' + noSpace(town) + ' .infected').text(val);
        // Write the percentage of infected if any
        var percent = val/this.towns[town].size*100;
        $('#' + noSpace(town) + ' .percent').text(percent? percent.toFixed(1)+'%' : '');
    }
    // Put the total infected where we can see it.
    $('.total-infected').text(total);
}